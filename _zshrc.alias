case ${OSTYPE} in
  darwin*)
    # alias ls='ls -hFG'
    alias ls='ls -hFG --color=auto'
    ;;
  linux*)
    alias ls='ls -hFG --color=auto'
    ;;
esac
alias ll='ls -l'
alias la='ls -A'
alias cp='cp -vi'
alias mv='mv -vi'
alias du='du -h'
# alias cat='more'
alias du='du -h'
# for charset
alias sort="LC_ALL='C' sort"
alias uniq="LC_ALL='C' uniq"
# alias s='screen -U'
alias zmv='noglob zmv'
alias sudo='sudo '
alias ta='tmux attach '
# alias mysql='mysql --local-infile=1'
alias javac='javac -J-Dfile.encoding=UTF-8'
alias java='java -Dfile.encoding=UTF-8'
alias scalac='scalac -J-Dfile.encoding=UTF-8'
alias scala='scala -Dfile.encoding=UTF-8'
alias ku='kubectl'
# alias grep='grep -C 3 --color=always --line-number --with-filename'
alias o='git ls-files | peco | xargs -o vim'
alias g='cd $(ghq list -p | peco)'
alias reload='exec $SHELL -l'
alias mkdir='mkdir -p'
alias gg='git grep -I -C3 --break --heading'
# android
alias android_uninstallapp='adb shell pm list package | sed -e s/package:// | peco | xargs adb uninstall'
alias restart-adb='adb kill-server; adb start-server'
# alias adb='adbp'
# alias pidcat='pidcatp'
alias ip="ipconfig getifaddr `netstat -rn -f inet | awk '/^default/{print $6;exit}'`"
alias today='date +"%Y%m%d"'

function mas-install {
  mas search $1 | head -n 1 | cut -d' ' -f 1 | xargs -I{} mas install {}
}

# URL-encode
eurl() {
 # curl -sw '%{url_effective}' --data-urlencode "$1" -G '' | tr -d '?' | tr -d '/'
 # nkf automatically insert new line at 60char length
 echo $1 | nkf -WwMQ | tr = % | sed -e "s/%$//g" | tr -d '\n'
}

# alias less=bat
export LESS=' -R -N '
# export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh %s'
export GREP_OPTIONS="--color=auto"


# --------------------------------------------------
#  original commands
# --------------------------------------------------
# remove files
# rm: just `mv` file(s) to ~/.Trash/<yyyymmdd>/
# rmf: original `rm`
function rmf() {
  help() {
    echo 'rmf help!'
    echo 'Usage: rmf [option] filename'
    return
  }
  for file in $*
  do
    case $file in
      -h|--help)
        help
        return
        ;;
      -rf|-fr)
        local option="-rf"
        ;;
      -r)
        local option="-r"
        ;;
      -f)
        local option="-f"
        ;;
      *)
        echo 'removed:' $file
        /bin/rm $option $file
    esac
  done
}

_rmfcmd() {
  _arguments \
    '(- *)'{-h,--help}'[show help]' \
    -r'[recursive]' \
    -f'[force]' \
    -rf'[recursive && force]' \
    '*: :_files'
}
compdef _rmfcmd rmf

function rm(){
  for file in $*
  do
    __rm_single_file $file
  done
}

function __rm_single_file(){
  local DATE=`date "+%y%m%d"`
  if ! [ -d ~/.Trash/$DATE/ ]
  then
    command /bin/mkdir -p ~/.Trash/$DATE/
  fi
  if ! [ $# -eq 1 ]
  then
    echo "__rm_single_file: 1 argument required but $# passed."
    exit
  fi
  if [ -e $1 ]
  then
    local BASENAME=`basename $1`
    local NAME=$BASENAME
    local COUNT=0
    while [ -e ~/.Trash/$DATE/$NAME ]
    do
      COUNT=$(($COUNT+1))
      NAME="$BASENAME.$COUNT"
    done
    command /bin/mv -v $1 ~/.Trash/$DATE/$NAME
  else
    echo "No such file or directory: $file"
  fi
}

# `cd` to cd and ls
function cdls() {
  \cd $1;
  ls;
}
alias cd=cdls

# counts of most used commands
function command_count() {
    local count
    if [ $# -ne 1 ]; then
      count=5
    else
      count=$1
    fi
    history-all | awk '{print $4}' | sort | uniq -c | sort -nr | head -n $count
}

# change directory to git-home
function git_home() {
  cd `git rev-parse --show-toplevel`
}

function git_replace() {
  before=$1
  after=$2
  git grep -l $before | xargs sed -i "" -e "s/$before/$after/g" 2>&1
}

##########################################
# commands using peco
##########################################

# select from command-history
function peco_select_history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco_select_history
bindkey '^r' peco_select_history

# select directory and `cd`
function peco_cdr(){
    local selected_dir=$(cdr -l | awk '{ print $2 }' | peco)
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}
zle -N peco_cdr
bindkey '^@' peco_cdr

# select file from `tree` and open it with vim
function tree_select() {
  tree -N -a --charset=o -f -I '.git|.idea|resolution-cache|target/streams|node_modules' | fzf --preview 'f() { set -- $(echo -- "$@" | grep -o "\./.*$"); [ $# -eq 0 -a ! -d $1 ] || head -n 100 $1; }; f {}' | sed -e "s/ ->.*\$//g" | tr -d '\||`| ' | tr '\n' ' ' | sed -e "s/--//g" | xargs echo
}

function peco_tree_vim(){
  local SELECTED_FILE=$(tree_select)
  if [ -n "$SELECTED_FILE" ]; then
    BUFFER="vim $SELECTED_FILE"
  fi
  zle accept-line
}
zle -N peco_tree_vim
bindkey "^v^t" peco_tree_vim

# select file from `tree`
function peco_tree_select(){
  local SELECTED_FILE=$(tree_select)
  if [ -n "$SELECTED_FILE" ]; then
    LBUFFER+="$SELECTED_FILE"
    CURSOR=$#LBUFFER
    zle reset-prompt
  fi
}
zle -N peco_tree_select
bindkey "^t" peco_tree_select

# select docker image hash
function peco_docker_image_id(){
    # LBUFFER+=$(docker ps -a | tail -n +2 | peco | cut -d" " -f1 | tr "\n" " ")
    LBUFFER+=$(docker ps -a --format '{{.ID}}\t{{.Names}}\t{{.Image}}\t{{.CreatedAt}}' | peco | awk -F '\t' '{ print $2 }' | tr "\n" " ")
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_docker_image_id
bindkey "^g^d^h" peco_docker_image_id

# select docker image repository:tag
function peco_docker_image(){
    LBUFFER+=$(docker images | peco | awk '{print $1":"$2" "}' | tr "\n" " ")
    CURSOR=$#LBUFFER
}
zle -N peco_docker_image
bindkey "^g^d^i" peco_docker_image

# grep files from current directory, select it and open in `less`
function peco_grep() {
  exec ack "$@" . | peco --exec 'awk -F : '"'"'{print "+" $2 " " $1}'"'"' | xargs less -N '
}
# zle -N peco_grep
# bindkey "^g^g" peco_grep

# select android device
function adb_locat_app() {
  APP_NAME=$1
  adb logcat | grep `adb shell ps | grep $1 | cut -c10-15`
}

function peco_kill() {
  local selected=$(ps aux | peco)
  if [ -n "$selected" ]; then
    echo "kill target: [$selected]"
    local pid=$(echo $selected | awk '{ print $2 }')
    BUFFER="kill $pid"
    zle accept-line
  fi
}
zle -N peco_kill
bindkey "^xp" peco_kill

##########################################
# Git commands using peco/fzf
##########################################

export FZF_DEFAULT_OPTS="--no-sort --exact --cycle --multi --ansi --reverse --border --sync --bind=ctrl-t:toggle --bind=ctrl-k:kill-line --bind=?:toggle-preview --bind=down:preview-down --bind=up:preview-up"

function select_file_from_git_status() {
  git status --short | \
    fzf -m --ansi --reverse --preview 'f() { set -- $(echo "$@"); [ $(echo $@ | grep "??" | wc -l) -eq 0 ] && git diff --color $2 || git diff --color --no-index /dev/null $2 }; f {}' |\
    # peco --query "$LBUFFER" | \
    awk -F ' ' '{print $NF}'
}

# select file to git add
function peco_select_git_add() {
    local SELECTED_FILE_TO_ADD="$(select_file_from_git_status)"
    if [ -n "$SELECTED_FILE_TO_ADD" ]; then
      BUFFER="git add $(echo "$SELECTED_FILE_TO_ADD" | tr '\n' ' ')"
      CURSOR=$#BUFFER
    fi
    zle accept-line
    # zle clear-screen
}
zle -N peco_select_git_add
bindkey "^g^a" peco_select_git_add

# select branch
function peco_select_from_git_branch() {
  # local list=$(git branch --sort=refname --sort=-authordate --color --all  --format='%(color:red)%(authordate:short)%(color:reset) %(objectname:short) %(align:width=45,position=left)%(color:green)%(refname:short)%(color:reset)%(end) <%(align:20,left)%(authorname)%(end)>[%(subject)] %(if)%(HEAD)%(then)* %(else)%(end)'; \
  local list=$(git branch --sort=refname --sort=-authordate --color --all  --format='%(color:red)%(authordate:short)%(color:reset) %(objectname:short) %(color:green)%(refname:short)%(color:reset) %(if)%(HEAD)%(then)* %(else)%(end)'; \
    git tag --color -l --format='%(color:red)%(creatordate:short)%(color:reset) %(objectname:short) %(color:yellow)%(align:width=45,position=left)%(refname:short)%(color:reset)%(end)')
    # git tag --color -l --format='%(color:red)%(creatordate:short)%(color:reset) %(color:yellow)%(align:width=45,position=left)%(refname:short)%(color:reset)%(end) [%(subject)]')
  # echo $list | fzf --preview 'unbuffer git --no-pager log -100 --oneline $(echo {+11..} | awk -F" " "{print $2}") 2> /dev/null' | \
  echo $list | fzf --preview 'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git --no-pager log --oneline -100 --pretty=format:"%C(red)%ad%Creset %C(green)%h%Creset %C(blue)%<(15,trunc)%an%Creset: %s" --date=short --color $1 ; }; f {}' |\
  # echo $list | fzf | \
    sed -e 's/\* //g' | \
    awk '{print $3}'  | \
    sed -e "s;remotes/;;g" | \
    perl -pe 's/\n/ /g'
}

# select branch and insert it as current input
function peco_insert_branch() {
    LBUFFER+=$(peco_select_from_git_branch)
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_branch
bindkey "^g^o" peco_insert_branch

# select branch to checkout
function peco_select_git_checkout() {
    local SELECTED_FILE_TO_CHECKOUT=`peco_select_from_git_branch | sed -e "s;origin/;;g"`
    if [ -n "$SELECTED_FILE_TO_CHECKOUT" ]; then
      BUFFER="git checkout $(echo "$SELECTED_FILE_TO_CHECKOUT" | tr '\n' ' ')"
      CURSOR=$#BUFFER
    fi
    zle accept-line
}
zle -N peco_select_git_checkout
bindkey "^gco" peco_select_git_checkout

# select file to show git diff which has changed from HEAD
function peco_select_git_diff() {
    local SELECTED_FILE_TO_DIFF="$(select_file_from_git_status)"
    if [ -n "$SELECTED_FILE_TO_DIFF" ]; then
      BUFFER="git diff $(echo "$SELECTED_FILE_TO_DIFF" | tr '\n' ' ')"
      CURSOR=$#BUFFER
    fi
    zle accept-line
    # zle clear-screen
}
zle -N peco_select_git_diff
bindkey "^g^i" peco_select_git_diff

# select file from git status view
function peco_select_from_git_status(){
    git status --short | \
      peco | \
      awk -F ' ' '{print $NF}' | \
      tr '\n' ' '
}

# select file from git status view and insert it as current input
function peco_insert_selected_git_files(){
    LBUFFER+=$(select_file_from_git_status)
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_selected_git_files
bindkey "^g^s" peco_insert_selected_git_files

##########################################
# GCP commands(gcloud) using peco
##########################################

# return true if provided file($1) is older than TTL($2)
function is_too_old() {
  local file=$1
  local ttl=$2 # seconds
  if [ -f $file ]; then
    [ $(( $(date +%s) - $(stat -c %Y $file) )) -gt $ttl ]
  else
    return false
  fi
}

# cache
function read_from_cache() {
  local cache=$1
  local ttl=$2  # seconds
  local command=$3
  if $(is_too_old $cache $ttl);then
    # if old, refresh cache

    # show loading indicator
    ## disable job control to suppress show background process id
    set +m
    loading 1000 &
    local loading_pid=$!

    ## execute heavy command
    local result=$(sh -c "$command")

    ## remove indicator even if already loading process finished
    kill -INT $loading_pid &>/dev/null
    ## wait loading indicator dead
    sleep 0.1
    ## recover job control
    set -m

    if [ -z $result ]; then
      return
    else
      echo $result > $cache
    fi
  fi
  cat $cache
}

# show active GCP acount
function gcloud_active_account() {
  local ACCOUNT_CACHE="/var/tmp/gcloud-active-acount.txt"
  read_from_cache $ACCOUNT_CACHE $((60 * 60 * 1)) "gcloud auth list --filter=status:ACTIVE --format=\"value(account)\""
}

# configurating active GCP account
function gcloud_set_account() {
  local ACCOUNT_CACHE="/var/tmp/gcloud-account.txt"
  local accounts=$(read_from_cache $ACCOUNT_CACHE $((60 * 60 * 24)) "gcloud auth list --format='value(account)'")

  local selected=$(echo $accounts | peco)
  echo "Account =>" $selected
  gcloud config set account $selected
}

# select GCP project from active acount
function gcloud_select_project() {
  local account=$(gcloud_active_account)
  local PROJECT_CACHE="/var/tmp/gcloud-$account-project.txt"
  local result=$(read_from_cache $PROJECT_CACHE $((60 * 60 * 24)) "gcloud projects list")
  echo $result | peco | awk '{print $1}'
}

function gcloud_select_project_buffer() {
  local project=$(gcloud_select_project)
  LBUFFER+="--project ${project}"
}
zle -N gcloud_select_project_buffer
bindkey "^gcp" gcloud_select_project_buffer

# configurating active GCP project
function gcloud_set_project() {
  local proj=$(gcloud_select_project)
  if [ -z $proj ]; then
    return;
  fi
  echo "project set to $proj"
  LBUFFER="gcloud config set project ${proj}"
  zle accept-line
}
zle -N gcloud_set_project
bindkey "^gcs" gcloud_set_project

# select GCP instance with selecting project from active account
function gcloud_compute_instance() {
  local account=$(gcloud_active_account)
  local project=$(gcloud_select_project)

  local INSTANCE_CACHE="/var/tmp/gcloud-$account-$project-instance.txt"
  if [ -z $project ]; then
    return;
  fi
  local vm_data_raw=$(read_from_cache $INSTANCE_CACHE $((60 * 60)) "gcloud compute instances list --project $project")
  if [ -z $vm_data_raw ]; then
    return;
  fi
  local vm_data=$(echo $vm_data_raw | peco)

  local instance_name=$(echo ${vm_data} | awk '{print $1}')
  local zone_name=$(echo ${vm_data} | awk '{print $2}')
  if [ -n "${instance_name}" ] && [ -n "${zone_name}" ]; then
    echo "--project ${project} --zone ${zone_name} ${instance_name}"
  else
    return false
  fi
}

# select GCP instance information and insert it as current input
function gcloud_compute_instance_edit() {
  LBUFFER="gcloud compute  $(gcloud_compute_instance)"
  CURSOR=15 # move cursor next to `compute `
}
zle -N gcloud_compute_instance_edit
bindkey "^gcl" gcloud_compute_instance_edit

# select GCP instance and ssh
function gcloud_ssh() {
  LBUFFER="gcloud compute ssh $(gcloud_compute_instance)"
  zle accept-line
}
zle -N gcloud_ssh
bindkey "^gcl" gcloud_ssh

##########################################
# kubernetes commands(kubectl) using peco
##########################################

# select kubenetes pod
function kubernetes_pod() {
  local SELECTED=$(kubectl get pod | peco | awk '{print $1}')
  LBUFFER+=$SELECTED
}
zle -N kubernetes_pod
bindkey "^q^p" kubernetes_pod

function kubernetes_namespace() {
  local SELECTED=$(kubectl get namespace | awk '{print $1}' | peco | tr -d '\n')
  LBUFFER+=$SELECTED
}
zle -N kubernetes_namespace
bindkey "^q^n" kubernetes_namespace

function kubernetes_use_context()
{
  local SELECTED=$(kubectl config get-contexts | awk '{print $2}' | peco | tr -d '\n')
  LBUFFER="kubectl config use-context ${SELECTED}"
  zle accept-line
}
zle -N kubernetes_use_context
bindkey "^quc" kubernetes_use_context

function kubernetes_use_ns()
{
  local SELECTED=$(kubectl get namespace | awk '{print $1}' | peco | tr -d '\n')
  LBUFFER="kubectl config set-context $(kubectl config current-context) --namespace=${SELECTED}"
  zle accept-line
}
zle -N kubernetes_use_ns
bindkey "^qun" kubernetes_use_ns

###################################

setopt extended_glob

typeset -A abbreviations
abbreviations=(
"G"    "| ag"
"L"    "| less"
"P"    "| pbcopy"
"X"    "| xargs"
"T"    "| tail"
"C"    "| cat"
"W"    "| wc"
"A"    "| awk"
"S"    "| sed"
"E"    "2>&1 > /dev/null"
"N"    "> /dev/null"
"J"    "| jq -S ."
"v"    "vim"
"gs"   "git status"
"gco"  "git commit -m"
"gl"   "git log"
"jvm"  "-jvm-debug 5005"
"curlj"  'curl -H "Content-Type: application/json" -d "$(jo'
)

magic-abbrev-expand() {
  local MATCH
  LBUFFER=${LBUFFER%%(#m)[-_a-zA-Z0-9]#}
  LBUFFER+=${abbreviations[$MATCH]:-$MATCH}
  zle self-insert
}

no-magic-abbrev-expand() {
  LBUFFER+=' '
}

zle -N magic-abbrev-expand
zle -N no-magic-abbrev-expand
bindkey " " magic-abbrev-expand
bindkey "^x " no-magic-abbrev-expand

