#!/usr/local/bin/zsh
# 文字コードの設定
export LC_CTYPE=ja_JP.UTF-8
export LANG=ja_JP.UTF-8
export JLESSCHARSET=japanese-sjis
export OUTPUT_CHARSET=utf-8
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
export DISABLE_AUTO_TITLE=true
export BAT_CONFIG_PATH=$HOME/.bat.conf

#----------------------------------------------------------
# use coreutils as default
#----------------------------------------------------------

export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH

#----------------------------------------------------------
# エイリアス
#----------------------------------------------------------
# 補完される前にオリジナルのコマンドまで展開してチェックする
setopt complete_aliases

#----------------------------------------------------------
# 基本
#----------------------------------------------------------
# 色を使う
autoload -U colors; colors
# ビープを鳴らさない
setopt nobeep
# ビープを鳴らさない
setopt nolistbeep
# エスケープシーケンスを使う
setopt prompt_subst
# コマンドラインでも#以降をコメントと見なす
setopt interactive_comments
# vi風のキーバインド
bindkey -v
# emacs
# bindkey -e
# C-s, C-qを無効にする
setopt no_flow_control
# 日本語のファイル名を表示可能
setopt print_eight_bit
# C-wで直前の/までを削除する
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
# ディレクトリを水色にする
#export LS_COLORS='di=01;36'
# 色の設定
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=33:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
export LSCOLORS=exfxcxdxdxegedabagacad
# zmv使う
autoload zmv

function git_current_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /'
}

# 空でEnter押すとlsとgit status表示
function do_enter() {
if [ -n "$BUFFER" ]; then
  zle accept-line
  return 0
fi
echo
ls
# ls_abbrev
# if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
#     echo
#     echo -e "\e[0;33m--- git status ---\e[0m"
#     git status -sb
# fi
zle reset-prompt
return 0
}
zle -N do_enter
bindkey '^m' do_enter

#----------------------------------------------------------
# 補完関連
#----------------------------------------------------------
# 補完機能を強化
autoload -Uz compinit; compinit -u

# 補完メッセージを読みやすくする
zstyle ':completion:*' verbose yes
zstyle ':completion:*' format '%B%d%b'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:descriptions' format '%BCompleting%b %U%d%u'

# URLを自動エスケープ
# auto-fuと競合する
autoload -Uz url-quote-magic; zle -N self-insert url-quote-magic
# TABで順に補完候補を切り替える
setopt auto_menu
# 補完候補を一覧表示
setopt auto_list
# 補完候補をEmacsのキーバインドで動けるように
zstyle ':completion:*:default' menu select=2
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# --prefix=/usrなどの=以降も補間
setopt magic_equal_subst
# ディレクトリ名の補間で末尾の/を自動的に付加し、次の補間に備える
setopt auto_param_slash
## 補完候補の色付け
#eval `dircolors`
export ZLS_COLORS=$LS_COLORS
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# 補完候補を詰めて表示
setopt list_packed
# 補完候補一覧でファイルの種別をマーク表示
setopt list_types
# 最後のスラッシュを自動的に削除しない
setopt noautoremoveslash
# スペルチェック
setopt correct
# killコマンドでプロセスを補完
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'

# AWS-CLIの補完
if [ -z '/usr/local/bin/aws_zsh_completer.sh' ]; then
  source /usr/local/bin/aws_zsh_completer.sh
fi

#----------------------------------------
# 予測の先読み
# -U オプション:既存の関数を読み込むときに、自分で定義した alias によってその関数の内容が書き換えられることを防ぐ
# うっとうしい！！！
# autoload -U predict-on
# zle-line-init() { predict-on }
# zle -N zle-line-init
# zle -N predict-on
# zle -N predict-off
# # C-x uでon
# # C-x iでoff
# bindkey '^xu' predict-on
# bindkey '^xi' predict-off
# # コマンドライン編集中は予測しない
# zstyle ':predict' toggle true
# 予測のon/offの切り替わりを表示
# zstyle ':predict' verbose true

#----------------------------------------------------------
# 移動関連
#----------------------------------------------------------
# ディレクトリ名でもcd
setopt auto_cd
# cdのタイミングで自動的にpushd.直前と同じ場合は無視
setopt auto_pushd
setopt pushd_ignore_dups
typeset -ga chpwd_functions
autoload -U chpwd_recent_dirs cdr
chpwd_functions+=chpwd_recent_dirs
zstyle ":chpwd:*" recent-dirs-max 1000
zstyle ":chpwd:*" recent-dirs-default true
zstyle ":completion:*" recent-dirs-insert always

#----------------------------------------------------------
# キーバインド関連
#----------------------------------------------------------
autoload -Uz select-word-style
select-word-style default
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

#----------------------------------------------------------
# vim keybind
#----------------------------------------------------------
# bindkey -M viins '\er' history-incremental-pattern-search-forward
bindkey -M viins '^?'  backward-delete-char
bindkey -M viins '^A'  beginning-of-line
bindkey -M viins '^B'  backward-char
bindkey -M viins '^D'  delete-char-or-list
bindkey -M viins '^E'  end-of-line
bindkey -M viins '^F'  forward-char
bindkey -M viins '^G'  send-break
bindkey -M viins '^H'  backward-delete-char
bindkey -M viins '^K'  kill-line
bindkey -M viins '^N'  down-line-or-history
bindkey -M viins '^P'  up-line-or-history
# bindkey -M viins '^R'  history-incremental-pattern-search-backward
bindkey -M viins '^U'  backward-kill-line
bindkey -M viins '^W'  backward-kill-word
bindkey -M viins '^Y'  yank

# text object
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $m $c select-bracketed
  done
done

autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
  for c in {a,i}{\',\",\`}; do
    bindkey -M $m $c select-quoted
  done
done

autoload -Uz surround
zle -N delete-surround surround
zle -N change-surround surround
zle -N add-surround surround
bindkey -a cs change-surround
bindkey -a ds delete-surround
bindkey -a ys add-surround
bindkey -M visual S add-surround

#----------------------------------------------------------
# 履歴関連
#----------------------------------------------------------
# 履歴の保存先
HISTFILE=$HOME/.zsh-history
# メモリに展開する履歴の数
HISTSIZE=100000
# 保存する履歴の数
SAVEHIST=100000
setopt HIST_IGNORE_ALL_DUPS
# ヒストリ全体でのコマンドの重複を禁止する
setopt hist_ignore_dups
# コマンドの空白をけずる
setopt hist_reduce_blanks
# historyコマンドはログに記述しない
setopt hist_no_store
# 先頭が空白だった場合はログに残さない
setopt hist_ignore_space
# 履歴ファイルに時刻を記録
setopt extended_history
# シェルのプロセスごとに履歴を共有
setopt share_history
# 複数のzshを同時に使うときなどhistoryファイルに上書きせず追加
setopt append_history
# 履歴をインクリメンタルに追加
setopt inc_append_history
# ヒストリを呼び出してから実行する間に一旦編集可能
setopt hist_verify
# 履歴検索機能のショートカット設定
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end
# インクリメンタルサーチの設定
bindkey "^r" history-incremental-search-backward
bindkey "^s" history-incremental-search-forward

# 重複を記録しない
setopt hist_ignore_dups

# 全履歴の一覧を出力する
function history-all { history -E 1 }

#----------------------------------------------------------
# プロンプト表示関連
#----------------------------------------------------------
# 右側に時間を表示する
RPROMPT="%D %*"
# 右側まで入力が来ら時間を消す
setopt transient_rprompt
# プロンプト
function precmd() {
# PROMPT="%(?.%F{cyan}.%F{red})%f%F{yello} %~% "
# やや匿名ver
# PROMPT="%(?.%F{cyan}.%F{red})%f%F{green}%f%F{yello} %~% "

# PROMPT="%(?.%F{green}^-^%f.%F{red}@_@%f) %{${fg[color]%}%}[%m]%{${fg[green]}%}%n%{${fg[yellow]}%} %~%{${reset_color}%}"
PROMPT="%(?.%F{green}%n% %f.%F{red}%n% %f)${fg[yellow]}%} %~%{${reset_color}%}"
st=`git status 2>/dev/null`
if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
  color=${fg[cyan]}
elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
  color=${fg[blue]}
elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
  color=${fg_bold[red]}
else
  color=${fg[red]}
fi
PROMPT+=" %{$color%}$(git_current_branch)%b%{${reset_color}%}
%B%F{white}$ %f%b"
}
PROMPT2="%_%% "
# コマンドスペルミスの際のプロンプト
SPROMPT="%r is correct? [No,Yes,Abort,Exit]: "


#----------------------------------------------------------
# Python
#----------------------------------------------------------
export NOSE_REDNOSE=1

#----------------------------------------------------------
# その他
#----------------------------------------------------------
# ログアウト時にバックグラウンドジョブをkillしない
setopt no_hup
# ログアウト時にバックグラウンドジョブを確認しない
setopt no_checkjobs
# バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt notify

# makeのエラー出力に色付け
e_normal=`echo -e "\033[0;30m"`
e_RED=`echo -e "\033[1;31m"`
e_BLUE=`echo -e "\033[1;36m"`
function make() {
LANG=C command make "$@" 2>&1 | sed -e "s@[Ee]rror:.*@$e_RED&$e_normal@g" -e "s@cannot\sfind.*@$e_RED&$e_normal@g" -e "s@[Ww]arning:.*@$e_BLUE&$e_normal@g"
}

pbcopy-buffer(){
  print -rn $BUFFER | pbcopy
  zle -M "pbcopy: ${BUFFER}"
}
zle -N pbcopy-buffer
bindkey '^x^p' pbcopy-buffer

#--------------------------------------------------
# anyenv
#--------------------------------------------------
if [ -d $HOME/.anyenv ] ; then
  export PATH="$HOME/.anyenv/bin:$PATH"
  eval "$(anyenv init - zsh)"
  # for D in `ls $HOME/.anyenv/envs`
  # do
  #   export PATH="$HOME/.anyenv/envs/$D/shims:$PATH"
  # done
fi

#----------------------------------------------------------
# 環境依存対応
#----------------------------------------------------------
# ~/.zshrc.localを読み込む
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
[ -f ~/.zshrc.alias ] && source ~/.zshrc.alias


#----------------------------------------------------------
# terminal-notifier with zsh-notify
#----------------------------------------------------------
# export REPORTTIME=5
export PATH=$PATH:~/.cabal/bin
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

export PATH=$HOME/.nodebrew/current/bin:$PATH

#----------------------------------------------------------
# Brewfile
#----------------------------------------------------------

export HOMEBREW_BREWFILE=~/dotfiles/Brewfile
# export fpath=(/usr/local/share/zsh-completions $fpath)

# direnv
eval "$(direnv hook zsh)"

#----------------------------------------------------------
# completion
#----------------------------------------------------------

# Check if 'kubectl' is a command in $PATH
if [ $commands[kubectl] ]; then

  # Placeholder 'kubectl' shell function:
  # Will only be executed on the first call to 'kubectl'
  kubectl() {

    # Remove this function, subsequent calls will execute 'kubectl' directly
    unfunction "$0"

    # Load auto-completion
    source <(kubectl completion zsh)
    echo 'loaded kubectl completion'

    # Execute 'kubectl' binary
    $0 "$@"
  }
fi

# Check if 'aws' is a command in $PATH
if [ $commands[aws] ]; then

  # Placeholder 'aws' shell function:
  # Will only be executed on the first call to 'aws'
  aws() {

    # Remove this function, subsequent calls will execute 'aws' directly
    unfunction "$0"

    # Load completion
    source /usr/local/bin/aws_zsh_completer.sh
    echo 'loaded aws completion'

    # Execute 'aws' binary
    $0 "$@"
  }
fi
# source ~/.zshrc.plugin

